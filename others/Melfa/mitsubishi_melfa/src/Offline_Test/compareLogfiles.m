% This script validates commands send to the Mitsubishi Melfa robot.
% For this reason, a ground truth trajectory was generated by using a 
% command line tool, which is known to work. This trajectory is also generated 
% by a ROS trajectory generator. The commands of the ROS node and the ones
% generated by the command line tool are compared on a binary level

close all;
clear;
clc;

OPTION_3D = 0;

%% Get data from command line tool
% offsets
OffsetsCLT = dlmread('LogFileOffsetsCLT.txt');

% commands
fileID = fopen('LogFileCommandsCLT.txt');
CommandsCLT  = fread(fileID, inf, 'float32');


%% Cut down Command Line Tool data
Active_Dim = 2;
Floats_Per_Command = 128;

% get time step when robot starts to move
Index_First_Active_Pos = find(OffsetsCLT(:,Active_Dim) > 0);
Index_First_Active_Pos = min(Index_First_Active_Pos);
First_Active_Pos = OffsetsCLT(Index_First_Active_Pos,Active_Dim);
Indeces_Active_CLT = find(OffsetsCLT(:,Active_Dim) >= First_Active_Pos);
Start_Index = min(Indeces_Active_CLT);

% get time step when robot stops moving
Last_Active_Pos = OffsetsCLT(end,Active_Dim);
Indeces_Active_CLT = find(OffsetsCLT(:,Active_Dim) ~= Last_Active_Pos);
End_Index = max(Indeces_Active_CLT);

% cut down
OffsetsCLT = OffsetsCLT(Start_Index:End_Index,:);
Start_Float = Floats_Per_Command * Start_Index + 1;
End_Float = Floats_Per_Command * End_Index;
CommandsCLT = reshape(CommandsCLT(Start_Float:End_Float), [4],[])';



%% Iterate over different data sets
ROS_Data_Sets = [100,200];
Num_ROS_Data_Sets = length(ROS_Data_Sets);
Subplot_Counter = 1;
for Curr_Data_Set = 1:Num_ROS_Data_Sets


    %% Get data from ROS Node
    ROS_Hz = ROS_Data_Sets(Curr_Data_Set);
    Name_ROS_File_Offsets = ['LogFileOffsetsROS_' num2str(ROS_Hz) 'Hz.txt'];
    Name_ROS_File_Commands = ['LogFileCommandsROS_' num2str(ROS_Hz) 'Hz.txt'];

    % offsets
    OffsetsROS = dlmread(Name_ROS_File_Offsets);

    % commands
    fileID = fopen(Name_ROS_File_Commands);
    CommandsROS = fread(fileID, inf, 'float32');

    %% Cut down ROS node data

    % get time step when robot starts to move
    Index_First_Active_Pos = find(OffsetsROS(:,Active_Dim) > 0);
    Index_First_Active_Pos = min(Index_First_Active_Pos);
    First_Active_Pos = OffsetsROS(Index_First_Active_Pos,Active_Dim);
    Indeces_Active_ROS = find(OffsetsROS(:,Active_Dim) >= First_Active_Pos);
    Start_Index = min(Indeces_Active_ROS);

    % get time step when robot stops moving
    Last_Active_Pos = OffsetsROS(end,Active_Dim);
    Indeces_Active_ROS = find(OffsetsROS(:,Active_Dim) ~= Last_Active_Pos);
    End_Index = max(Indeces_Active_ROS);

    % cut down
    OffsetsROS = OffsetsROS(Start_Index:End_Index,:);
    Start_Float = Floats_Per_Command * (Start_Index) + 1;
    End_Float = Floats_Per_Command * (End_Index);
    CommandsROS = reshape(CommandsROS(Start_Float:End_Float), [4],[])';


    %% Plot Trajectories
    Num_Commands = min(size(CommandsROS,1) /32,size(CommandsCLT,1) /32);
    Num_Lines_Per_Command = 32;

    PosCLT = zeros(Num_Commands,3);
    PosROS = zeros(Num_Commands,3);
    Line_Curr_X = 1;
    Line_Curr_Y = 1;
    Line_Curr_Z = 2;

    for i = 1:Num_Commands

        PosCLT(i,:) = [CommandsCLT(Line_Curr_X,3), CommandsCLT(Line_Curr_Y,4), CommandsCLT(Line_Curr_Z,1)];
        PosROS(i,:) = [CommandsROS(Line_Curr_X,3), CommandsROS(Line_Curr_Y,4), CommandsROS(Line_Curr_Z,1)];

        Line_Curr_X = Line_Curr_X + Num_Lines_Per_Command;
        Line_Curr_Y = Line_Curr_Y + Num_Lines_Per_Command;
        Line_Curr_Z = Line_Curr_Z + Num_Lines_Per_Command;

    end
    
    Max_Active_Dim = max([max(PosCLT(:,Active_Dim)),max(PosROS(:,Active_Dim))]);
    Min_Active_Dim = max([min(PosCLT(:,Active_Dim)),min(PosROS(:,Active_Dim))]);
    Min_Time = 0;
    Max_Time = size(PosCLT,1);

    
    Line_Width = 2;
    Font_Size_Title = 12;
    
    if OPTION_3D
        plot3(PosCLT(:,1),PosCLT(:,2),PosCLT(:,3),'b');
        hold on
        plot3(PosROS(:,1),PosROS(:,2),PosROS(:,3),'b');
        hold off
    else
        subplot(Num_ROS_Data_Sets,2,Subplot_Counter)
        plot(PosCLT(:,Active_Dim),'b','LineWidth', Line_Width);
        ylim([Min_Active_Dim Max_Active_Dim]);
        xlim([Min_Time Max_Time] );
        title('Ground Truth Trajectory','FontSize', Font_Size_Title,'fontweight','bold')
        ylabel('X Axis [mm]')
        xlabel('Time steps [7.4ms]')
        
        Title_ROS_Plot = ['ROS, ' num2str(ROS_Hz) 'Hz'];
        
        subplot(Num_ROS_Data_Sets,2,Subplot_Counter+1)
        plot(PosROS(:,Active_Dim),'r','LineWidth', Line_Width);
        ylim([Min_Active_Dim Max_Active_Dim]);
        xlim([Min_Time Max_Time] );
        title(Title_ROS_Plot,'FontSize', Font_Size_Title,'fontweight','bold')
        ylabel('X Axis [mm]')
        xlabel('Time steps [7.4ms]')
        
    end
    
    Subplot_Counter = Subplot_Counter + 2;

end
















